package gui;

import database.ActorDAO;
import database.DirectorDAO;
import database.MovieDAO;
import database.MovieStudioDAO;
import database.ProducerDAO;
import java.util.ArrayList;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import model.Actor;
import model.Director;
import model.Movie;
import model.MovieStudio;
import model.Producer;
import model.Utils;

public class MoviesForm extends javax.swing.JFrame {

    DefaultTableModel actorModel;
    DefaultTableModel producerModel;
    DefaultTableModel movieModel;

    boolean isUpdate = false;

    int movieId = -1;

    public MoviesForm() {
        initComponents();

        actorModel = (DefaultTableModel) actorTable.getModel();
        producerModel = (DefaultTableModel) producerTable.getModel();
        movieModel = (DefaultTableModel) movieTable.getModel();

        insertProducers();
        insertActors();
        insertMovies();

        for (Director dr : DirectorDAO.getAllDirectors()) {
            directorC.addItem(dr.getId() + ":" + dr.getName());
        }
        for (MovieStudio studio : MovieStudioDAO.getAllMovieStudios()) {
            studioC.addItem(studio.getId() + ":" + studio.getName());
        }
    }

    void insertProducers() {

        producerModel.getDataVector().removeAllElements();
        producerTable.revalidate();

        for (Producer pd : ProducerDAO.getAllProducers()) {

            producerModel.addRow(new Object[]{pd.getId(), pd.getName()});
        }

    }

    void insertActors() {

        actorModel.getDataVector().removeAllElements();
        actorTable.revalidate();

        for (Actor actor : ActorDAO.getAllActors()) {
            actorModel.addRow(new Object[]{actor.getId(), actor.getName(), actor.getRole()});
        }

    }

    void insertMovies() {

        movieModel.getDataVector().removeAllElements();
        movieTable.revalidate();

        for (Movie m : MovieDAO.getAllMovies()) {
            movieModel.addRow(new Object[]{m.getId(), m.getTitle(), m.getYearOfRelease(), m.getGenre(), m.getPrice()});
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        actorTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        producerTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        titleT = new javax.swing.JTextField();
        yearReleaseT = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        genreT = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        runningTimeT = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        directorC = new javax.swing.JComboBox<String>();
        studioC = new javax.swing.JComboBox<String>();
        jLabel9 = new javax.swing.JLabel();
        priceT = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        movieTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Geneva", 0, 24)); // NOI18N
        jLabel1.setText("Movies");

        actorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Name", "Role"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(actorTable);

        producerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(producerTable);

        jLabel2.setFont(new java.awt.Font("Geneva", 0, 14)); // NOI18N
        jLabel2.setText("Select multiple actors to add to movie:");

        jLabel3.setFont(new java.awt.Font("Geneva", 0, 14)); // NOI18N
        jLabel3.setText("Select multiple producers to add to movie:");

        jLabel4.setText("Title:");

        jLabel5.setText("Year of Release:");

        jLabel6.setText("Genre:");

        jButton1.setBackground(new java.awt.Color(70, 69, 72));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        saveBtn.setBackground(new java.awt.Color(70, 69, 72));
        saveBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveBtn.setText("SAVE");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        jLabel7.setText("Running Time:");

        jLabel8.setText("Director:");

        directorC.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Select from following" }));

        studioC.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] { "Select from following" }));

        jLabel9.setText("Movie Studio:");

        jLabel10.setText("Price:");

        movieTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Release Year", "Genre", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        movieTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                movieTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(movieTable);

        jButton3.setBackground(new java.awt.Color(70, 69, 72));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Geneva", 0, 14)); // NOI18N
        jLabel11.setText("Movies List");

        jButton4.setBackground(new java.awt.Color(70, 69, 72));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5)
                            .addComponent(yearReleaseT)
                            .addComponent(jLabel6)
                            .addComponent(genreT)
                            .addComponent(jLabel4)
                            .addComponent(titleT)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)
                            .addComponent(priceT)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(runningTimeT)
                            .addComponent(studioC, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(directorC, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(69, 69, 69)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(277, 277, 277)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel11)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(titleT, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(yearReleaseT, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(genreT, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(runningTimeT, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(directorC, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(studioC, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(priceT, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(51, 51, 51))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1343, 746));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed

        if (titleT.getText().isEmpty() || yearReleaseT.getText().isEmpty() || genreT.getText().isEmpty() || runningTimeT.getText().isEmpty()
                || directorC.getSelectedIndex() == -1 || studioC.getSelectedIndex() == -1 || priceT.getText().isEmpty()) {

            Utils.showMsg("Please fill all fields");
        } else {
            int[] selectedActors = actorTable.getSelectedRows();

            if (selectedActors.length <= 1) {
                Utils.showMsg("Please select more than one actors for the movie");
            } else {

                int[] selectedProducers = producerTable.getSelectedRows();

                if (selectedProducers.length < 1) {
                    Utils.showMsg("Please select more than one producers for the movie");

                } else {

                    ArrayList<Actor> actors = new ArrayList<>();
                    ArrayList<Producer> producers = new ArrayList<>();

                    for (int row : selectedActors) {
                        int id = (int) actorTable.getValueAt(row, 0);
                        Actor actor = ActorDAO.getActorById(id);
                        actors.add(actor);
                    }

                    for (int row : selectedProducers) {
                        int id = (int) producerTable.getValueAt(row, 0);
                        Producer producer = ProducerDAO.getProducerById(id);
                        producers.add(producer);
                    }

                    int director_id = Integer.parseInt(directorC.getSelectedItem().toString().split(":")[0]);
                    int studio_id = Integer.parseInt(studioC.getSelectedItem().toString().split(":")[0]);

                    Director director = DirectorDAO.getDirectorById(director_id);

                    MovieStudio studio = MovieStudioDAO.getMovieStudioById(studio_id);

                    if (isUpdate) {
                        Movie movie = new Movie(movieId,titleT.getText(), Integer.parseInt(yearReleaseT.getText()), genreT.getText(), Integer.parseInt(runningTimeT.getText()), director, producers, actors, studio, 2);
                        MovieDAO.updateMovie(movie);
                        resetValues();
                        Utils.showMsg("Successfully updated  Movie");

                    } else {
                        Movie movie = new Movie(titleT.getText(), Integer.parseInt(yearReleaseT.getText()), genreT.getText(), Integer.parseInt(runningTimeT.getText()), director, producers, actors, studio, 2);

                        MovieDAO.addMovie(movie);
                        resetValues();
                        Utils.showMsg("Successfully added new Movie");

                    }

                }

            }

        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        resetValues();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int index = movieTable.getSelectedRow();
        if (index == -1) {
            Utils.showMsg("Please first select any movie to update");
        } else {

            int id = (int) movieTable.getValueAt(index, 0);

            MovieDAO.deleteMovie(id);
            insertMovies();
            Utils.showMsg("Successfully delete movie");

        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        new AdminMenu().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void movieTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_movieTableMouseClicked

        actorTable.clearSelection();
        producerTable.clearSelection();

        int index = movieTable.getSelectedRow();

        if (index != -1) {

            int id = (int) movieTable.getValueAt(index, 0);

            movieId = id;

            isUpdate = true;

            Movie movie = MovieDAO.getMovieById(id);
            titleT.setText(movie.getTitle());
            genreT.setText(movie.getGenre());
            yearReleaseT.setText(movie.getYearOfRelease() + "");
            runningTimeT.setText(movie.getRunningTime() + "");
            directorC.setSelectedItem(movie.getDirector().getId() + ":" + movie.getDirector().getName());
            studioC.setSelectedItem(movie.getMovieStudio().getId() + ":" + movie.getMovieStudio().getName());
            priceT.setText(movie.getPrice() + "");

            int rowCount = actorTable.getRowCount();
            int rowCount1 = producerTable.getRowCount();

            // Iterate through all rows using a for loop
            for (int i = 0; i < rowCount; i++) {
                // Access data from each cell in the current row
                int newID = (int) actorTable.getValueAt(i, 0); // Replace 0 with the column index

                for (Actor actor : movie.getActors()) {
                    if (actor.getId() == newID) {

                        actorTable.addRowSelectionInterval(i, i);
                    }
                }

            }

            for (int i = 0; i < rowCount1; i++) {
                // Access data from each cell in the current row
                int newID = (int) producerTable.getValueAt(i, 0); // Replace 0 with the column index

                for (Producer producer : movie.getProducers()) {
                    if (producer.getId() == newID) {
                        producerTable.addRowSelectionInterval(i, i);
                    }
                }

            }

            saveBtn.setText("UPDATE");

        }


    }//GEN-LAST:event_movieTableMouseClicked

    void resetValues() {

        actorTable.clearSelection();
        movieTable.clearSelection();
        producerTable.clearSelection();

        titleT.setText("");
        yearReleaseT.setText("");
        genreT.setText("");
        runningTimeT.setText("");
        priceT.setText("");
        directorC.setSelectedIndex(0);
        studioC.setSelectedIndex(0);

        saveBtn.setText("SAVE");
        actorTable.clearSelection();
        producerTable.clearSelection();
        movieTable.clearSelection();
        isUpdate = false;
        movieId = -1;
        insertMovies();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MoviesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MoviesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MoviesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MoviesForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MoviesForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable actorTable;
    private javax.swing.JComboBox<String> directorC;
    private javax.swing.JTextField genreT;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable movieTable;
    private javax.swing.JTextField priceT;
    private javax.swing.JTable producerTable;
    private javax.swing.JTextField runningTimeT;
    private javax.swing.JButton saveBtn;
    private javax.swing.JComboBox<String> studioC;
    private javax.swing.JTextField titleT;
    private javax.swing.JTextField yearReleaseT;
    // End of variables declaration//GEN-END:variables
}
